package POJO;
// Generated Oct 21, 2020 8:36:45 AM by Hibernate Tools 4.3.1

import daos.DAO;
import javax.faces.bean.SessionScoped;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;




/**
 * UserInfo generated by hbm2java
 */
@ManagedBean
@SessionScoped
public class UserInfo  implements java.io.Serializable {


     private Integer userId;
     private String email;
     private String password;
     private String nama;
     private String type;
     private String FinalPassword;
     private String confirmPassword;
     

    public UserInfo() {
    }
    
    public UserInfo(int userId, String email, String password, String nama, String type) {
       this.userId = userId;
       this.email = email;
       this.password = password;
       this.nama = nama;
       this.type = type;
    }

    public String getConfirmPassword() {
        return confirmPassword;
    }

    public void setConfirmPassword(String confirmPassword) {
        this.confirmPassword = confirmPassword;
    }
    

    public void setFinalPassword(String FinalPassword) {
        this.FinalPassword = FinalPassword;
    }
    
    public String getFinalPassword() {
        return FinalPassword;
    }
   
    public Integer getUserId() {
        return this.userId;
    }
    
    public void setUserId(Integer userId) {
        this.userId = userId;
    }
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public String getNama() {
        return this.nama;
    }
    
    public void setNama(String nama) {
        this.nama = nama;
    }
    public String getType() {
        return this.type;
    }
    
    public void setType(String type) {
        this.type = type;
    }
    
    public void save()
    {
        
        DAO pdao=new DAO();
        pdao.addAcc(this);
    }
    public void validateEmail(FacesContext fc, UIComponent c, Object value)throws ValidatorException {
    String email= (String)value;
    Pattern mask = null;
    mask = Pattern.compile(".+@.+\\.[a-z]+");
    Matcher matcher = mask.matcher(email);
    
    if (!matcher.matches()){
        FacesMessage message = new FacesMessage();
        message.setDetail("Invalid e-mail ID");
        message.setSummary("Invalid e-mail ID");
        throw new ValidatorException(message);
    }
}
    
public void validateFinalPassword(FacesContext fc, UIComponent c, Object value)throws ValidatorException {
    setFinalPassword((String) value);
}
public void validateCPassword(FacesContext fc, UIComponent c, Object value)throws ValidatorException
{
String cPassword= (String)value;
UserInfo ui=new UserInfo();
System.out.println(getFinalPassword());

    if (cPassword.compareTo(getFinalPassword())!=0 ) {
        FacesMessage message = new FacesMessage();
        message.setSummary("Password does not match");
        throw new ValidatorException(message);
    }
}
 public String validatelogin()
    { 
        try {
            DAO pdao=new DAO();
            List<UserInfo> prod=pdao.validateLogin(email, password);
            email=prod.get(0).email;
            password=prod.get(0).password;
            nama=prod.get(0).nama;
            type=prod.get(0).type;
            userId=prod.get(0).userId;
           
            
            FacesContext context = FacesContext.getCurrentInstance();
            if(email != null) {
                context.getExternalContext().getSessionMap().put("nama", nama);
                context.getExternalContext().getSessionMap().put("type", type);
                context.getExternalContext().getSessionMap().put("userId", userId);
                context.getExternalContext().getSessionMap().put("email", email);
                return "success";
            }
            else {
                return "error";
            }
        }
        catch(Exception ex) {
            return "error";
        }
        //return prod;
    }
        public String logout() {
        FacesContext.getCurrentInstance().getExternalContext().invalidateSession();
        return "index";
    }




}


